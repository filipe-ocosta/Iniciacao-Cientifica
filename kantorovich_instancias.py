# -*- coding: utf-8 -*-
"""kantorovich-instancias.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p0pCLK-8ZoSjqo39UH5pqVmnNboZnzcR
"""

# Commented out IPython magic to ensure Python compatibility.
#%pip install -i https://pypi.gurobi.com gurobipy
import gurobipy as gp
from gurobipy import GRB

import numpy as np

nmrItems = int(input())
barLength = int(input())
itemsLength = eval(input())
itemsDemand = eval(input())
nmrMaxBars = sum(itemsDemand)

#nmrItems = 7
#barLength = 29
#itemsLength = [29, 14, 6.5, 6, 5.5, 4.5, 2.5]
#itemsDemand = [2, 2, 3, 4, 1, 1, 2]


#criar modelo
m = gp.Model("modelo")

#define tempo maximo de execução
m.setParam('TimeLimit', 30*60)

#adicionar variaveis
A = m.addVars(nmrItems, nmrMaxBars, vtype = GRB.INTEGER, lb = 0, name = "A") 
z = m.addVars(nmrMaxBars, vtype = GRB.BINARY, lb = 0, name = "z")

#montar funcao objetivo
m.setObjective(gp.quicksum(z[i] for i in range(nmrMaxBars)), GRB.MINIMIZE)

#montar restricoes
m.addConstrs((gp.quicksum((itemsLength[i]*A[i,j]) for i in range(nmrItems)) <= (barLength*z[j])) for j in range(nmrMaxBars))
m.addConstrs(((gp.quicksum(A[i,j] for j in range(nmrMaxBars))) == itemsDemand[i]) for i in range(nmrItems))
m.addConstrs((z[i+1] <= z[i]) for i in range(nmrMaxBars-1))

m.optimize()

print("\tTamanho\tDemanda")

for i in range(nmrItems):
  print("\nItem "+str(i+1)+"\t   "+str(itemsLength[i])+"\t   "+str(itemsDemand[i]))

print("\n\n------------------------------------------")

print("Mínimo de palitos utilizados: "+str(m.objVal))
print("\n\t\t", end="")

for i in range(nmrItems):
  print("Item "+str(i+1), end="\t")
print()

for j in range(nmrMaxBars):
  print("\nPalito "+str(j+1), end="")
  for i in range(nmrItems):
    print("\t   "+str(round(A[i,j].X)), end="")
  print()

print("\n\n------------------------------------------")
